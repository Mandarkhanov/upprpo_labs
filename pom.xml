<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tutorial</groupId>
    <artifactId>LW1</artifactId>
    <version>1.0-SNAPSHOT</version> <!-- Эту версию будет обновлять semantic-release -->

    <properties>
        <maven.compiler.source>23</maven.compiler.source>
        <maven.compiler.target>23</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Версии плагинов для статического анализа и покрытия -->
        <jacoco.version>0.8.12</jacoco.version>
        <maven-pmd-plugin.version>3.24.0</maven-pmd-plugin.version>
        <maven-checkstyle-plugin.version>3.4.0</maven-checkstyle-plugin.version>
        <checkstyle.version>10.17.0</checkstyle.version> <!-- Версия самой Checkstyle -->
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.3.1</maven-surefire-plugin.version>
        <maven-jar-plugin.version>3.4.2</maven-jar-plugin.version>
        <versions-maven-plugin.version>2.16.2</versions-maven-plugin.version>
        <sonar-maven-plugin.version>3.11.0.3922</sonar-maven-plugin.version>

        <!-- Настройки для SonarCloud (ЗАМЕНИ ЗНАЧЕНИЯ) -->
        <!-- sonar.organization: твой GitHub username (например, Mandarkhanov) -->
        <sonar.organization>Mandarkhanov</sonar.organization>
        <!-- sonar.projectKey: обычно GitHub username_ИмяРепозитория (например, YOUR_GITHUB_USERNAME_upprpo_labs) -->
        <sonar.projectKey>Mandarkhanov_LW1</sonar.projectKey>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.sources>src/main/java</sonar.sources>
        <sonar.tests>src/test/java</sonar.tests>
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
        <sonar.coverage.jacoco.xmlReportPaths>${project.build.directory}/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.java.binaries>target/classes</sonar.java.binaries>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.9.3</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Плагин для компиляции -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <!-- Плагин Surefire для запуска тестов (важен для JaCoCo) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>

            <!-- JaCoCo для покрытия кода -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal> <!-- Готовит агент JaCoCo перед тестами -->
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>verify</phase> <!-- Генерирует отчет после тестов -->
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!-- Проверка порогов покрытия -->
                    <execution>
                        <id>jacoco-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.80</minimum> <!-- МИНИМАЛЬНЫЙ ПОРОГ ПОКРЫТИЯ (ЛИНИИ) 80% -->
                                        </limit>
                                        <limit>
                                            <counter>BRANCH</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.80</minimum> <!-- МИНИМАЛЬНЫЙ ПОРОГ ПОКРЫТИЯ (ВЕТКИ) 80% -->
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                            <haltOnFailure>true</haltOnFailure> <!-- Останавливать сборку, если пороги не достигнуты -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- PMD Plugin для статического анализа -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven-pmd-plugin.version}</version>
                <configuration>
                    <targetJdk>${maven.compiler.target}</targetJdk>
                    <rulesets>
                        <!-- Стандартные наборы правил PMD -->
                        <ruleset>/category/java/bestpractices.xml</ruleset>
                        <ruleset>/category/java/codestyle.xml</ruleset>
                        <ruleset>/category/java/design.xml</ruleset>
                        <ruleset>/category/java/errorprone.xml</ruleset>
                        <ruleset>/category/java/multithreading.xml</ruleset>
                        <ruleset>/category/java/performance.xml</ruleset>
                    </rulesets>
                    <failOnViolation>true</failOnViolation> <!-- Останавливать сборку при нарушениях -->
                    <printFailingErrors>true</printFailingErrors>
                    <linkXRef>false</linkXRef> <!-- Отключить, если не генерируешь Maven Site -->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal> <!-- Проверка на фазе verify -->
                            <goal>cpd-check</goal> <!-- Проверка на дублирование кода -->
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Checkstyle Plugin для проверки стиля кода -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <!-- Указываем путь к файлу правил Checkstyle.
                         ОБЯЗАТЕЛЬНО: создай файл 'checkstyle.xml' в корне проекта
                         и скопируй в него содержимое из Шага 4. -->
                    <configLocation>checkstyle.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>false</failsOnError> <!-- Останавливать сборку при ошибках стиля -->
                    <linkXRef>false</linkXRef> <!-- Отключить, если не генерируешь Maven Site -->
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- SonarCloud Maven Plugin -->
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </plugin>

            <!-- Твои существующие плагины -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>tutorial.Main</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-maven-plugin.version}</version>
            </plugin>
        </plugins>
    </build>
</project>