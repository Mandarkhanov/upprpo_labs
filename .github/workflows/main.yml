name: Java CI, Docker Build & Release

on:
  push:
    branches:
      - master # Триггер для релизов и SonarCloud
  pull_request:
    branches:
      - master # Триггер для тестов, анализа, и PR-декорации SonarCloud

jobs:
  build_and_test_and_analyze: # Объединил все в один job для упрощения
    name: Build, Test, Analyze & SonarCloud
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.get_version.outputs.version }}

    # Настройки прав для этого job'а
    permissions:
      contents: read     # Для чтения кода
      packages: read     # Для GHCR (если нужны)
      security-events: write # Для SonarCloud (если он будет пушить данные о безопасности)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Необходимо для semantic-release и SonarCloud для анализа всей истории коммитов

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: 'maven' # Добавил кэширование Maven зависимостей

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build, Test, Perform Checks and Analyze with SonarCloud
        # Команда 'mvn verify' запускает:
        # - компиляцию
        # - тесты (Surefire)
        # - JaCoCo (prepare-agent, report, check)
        # - PMD (check, cpd-check)
        # - Checkstyle (check)
        # Если любой из этих плагинов настроен на failOnViolation/haltOnFailure=true
        # и есть нарушения, сборка упадет на этом шаге.
        # 'sonar:sonar' отправляет результаты анализа в SonarCloud.
        run: mvn -B verify sonar:sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Для интеграции SonarCloud с GitHub (например, PR-декорация)
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Секрет для аутентификации на SonarCloud

      # (Опционально) Публикация артефактов отчетов для скачивания
      - name: Archive JaCoCo coverage report
        if: always() # Запускать всегда, даже если предыдущие шаги упали, чтобы можно было скачать отчет
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/
          retention-days: 7

      - name: Archive PMD and Checkstyle reports
        if: always() # Запускать всегда, чтобы можно было скачать отчеты
        uses: actions/upload-artifact@v3
        with:
          name: static-analysis-reports
          path: |
            target/pmd.xml
            target/checkstyle-result.xml
          retention-days: 7

      - name: Get project version from pom.xml
        # Этот шаг выполняется, чтобы передать версию в другие jobs (docker_build_and_push)
        # Однако, если предыдущий шаг 'mvn' упал, этот шаг не выполнится.
        # Для semantic-release это не проблема, он сам определяет версию.
        # Для docker_build_and_push с тегом "latest" это тоже не критично.
        id: get_version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT


  docker_build_and_push:
    needs: build_and_test_and_analyze # Запускать после успешной сборки, тестов и анализа
    runs-on: ubuntu-latest
    # Запускать только для master ветки при push (чтобы не пушить dev-сборки)
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write # Необходимо для пуша в GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU (for multi-platform builds, optional but good practice)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          # Для master ветки будем использовать теги: latest, sha
          # Релизная версия будет тегироваться semantic-release через Git-теги
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Semantic Release
    needs: docker_build_and_push # Запускать после успешного пуша Docker-образа
    runs-on: ubuntu-latest
    # Запускать только для push-событий в master ветку
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    permissions:
      contents: write      # для коммита pom.xml/changelog, создания тегов и релизов
      issues: write      # для комментирования issue/PR (если настроено)
      pull-requests: write # для комментирования PR (если настроено)
      packages: write    # Не нужно, если Docker-образ с версией не пушится отсюда

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Нужно для анализа всех коммитов

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies (semantic-release)
        # Используем npm ci, если package-lock.json существует, иначе npm install
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Set up JDK 23 (for mvn commands in semantic-release)
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: 'maven'

      - name: Configure Git User
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}