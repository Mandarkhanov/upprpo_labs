=== FILE: .\src\main\java\ru\nsu\fit\mandarkhanov\upprpo\ISolver.java ===

package ru.nsu.fit.mandarkhanov.upprpo;

public interface ISolver {
    void SetInput(Object[] parameters);
    void Run();
    Object[] GetOutput();
}

=== FILE: .\src\main\java\ru\nsu\fit\mandarkhanov\upprpo\LinearCombinations.java ===

package ru.nsu.fit.mandarkhanov.upprpo;

import java.util.ArrayList;
import java.util.List;

public class LinearCombinations {

    public static void main(String[] args) {
        // Базисные векторы
        int[] v1 = {1, 0, 0, 2, 0, 1};
        int[] v2 = {0, 1, 0, 1, 0, 2};
        int[] v3 = {0, 0, 1, 0, 1, 2};

        // Список для хранения всех линейных комбинаций
        List<int[]> combinations = new ArrayList<>();

        // Перебираем все возможные коэффициенты c1, c2, c3 ∈ {0, 1, 2}
        for (int c1 = 0; c1 < 3; c1++) {
            for (int c2 = 0; c2 < 3; c2++) {
                for (int c3 = 0; c3 < 3; c3++) {
                    // Вычисляем линейную комбинацию
                    int[] combination = new int[6];
                    for (int i = 0; i < 6; i++) {
                        combination[i] = (c1 * v1[i] + c2 * v2[i] + c3 * v3[i]) % 3;
                    }
                    combinations.add(combination);
                }
            }
        }

        // Выводим все комбинации
        System.out.println("Все линейные комбинации:");
        for (int[] comb : combinations) {
            for (int value : comb) {
                System.out.print(value + " ");
            }
            System.out.println();
        }

        // Проверяем количество комбинаций
        System.out.println("Количество комбинаций: " + combinations.size());
    }
}

=== FILE: .\src\main\java\ru\nsu\fit\mandarkhanov\upprpo\QuadraticEquationSolver.java ===

package ru.nsu.fit.mandarkhanov.upprpo;

public class QuadraticEquationSolver implements ISolver
{
    private double coefficientA;
    private double coefficientB;
    private double coefficientC;
    private Object[] output;

    @Override
    public void SetInput(Object[] parameters) {
        coefficientA = (double) parameters[0];
        coefficientB = (double) parameters[1];
        coefficientC = (double) parameters[2];
    }

    @Override
    public void Run() {
        double discriminant = Math.pow(coefficientB, 2) - 4 * coefficientA * coefficientC;

        if (discriminant < 0)
        {
            output = new Object[]{};
            return;
        }
        output = new Object[2];
        output[0] = (-coefficientB + Math.sqrt(discriminant)) / (2 * coefficientA);
        output[1] = (-coefficientB - Math.sqrt(discriminant)) / (2 * coefficientA);
    }

    @Override
    public Object[] GetOutput() {
        return output;
    }
}


=== FILE: .\src\main\java\tutorial\Main.java ===

package tutorial;

import ru.nsu.fit.mandarkhanov.upprpo.QuadraticEquationSolver;

public class Main {
    public static void main(String[] args) {
        var quadraticEquationSolver = new QuadraticEquationSolver();
        quadraticEquationSolver.SetInput(new Object[]{3.0, 6.0, 2.0});
        quadraticEquationSolver.Run();

        var solution = quadraticEquationSolver.GetOutput();

        System.out.printf("x_1 = %f, x_2 = %f\n", (double)solution[0], (double)solution[1]);
    }
}

=== FILE: .\src\test\java\ru\nsu\fit\mandarkhanov\upprpo\QuadraticEquationSolverTest.java ===

package ru.nsu.fit.mandarkhanov.upprpo;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class QuadraticEquationSolverTest {

    private void RunTest(ISolver solver, Object[] input, double[] expectedOutput, double delta)
    {
        solver.SetInput(input);
        solver.Run();

        var actualOutput = solver.GetOutput();
        Assertions.assertEquals(expectedOutput.length, actualOutput.length);

        for (int i = 0; i < actualOutput.length; i++) {
            Assertions.assertEquals(expectedOutput[i], (double)actualOutput[i], delta);
        }
    }

    @Test
    public void TestQuadraticEquationSolver()
    {
        RunTest(new QuadraticEquationSolver(), new Object[] { 3.0, 6.0, 2.0 }, new double[]{ -0.422, -1.577 }, 1.0e-3);
        RunTest(new QuadraticEquationSolver(), new Object[] { -1.0, 10.0, -10.0 }, new double[] { 1.127, 8.872 }, 1.0e-3);
        RunTest(new QuadraticEquationSolver(), new Object[] { 18.0, 19.0, 20.0 }, new double[] { }, 1.0e-3);
        RunTest(new QuadraticEquationSolver(), new Object[] { 7.0, 1.0, 2.0 }, new double[] { }, 0.0);
    }
}

